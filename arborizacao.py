# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14gbsmdX-oORQg8qqKaHyQ_Imsf0_FEA0
"""

import streamlit as st
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np

# Carregar o modelo e as classes
model = tf.keras.models.load_model("keras_model.h5")
class_names = open("labels.txt", "r").read().splitlines()

# Função para pré-processar a imagem
def preprocess_image(image):
    size = (224, 224)
    image = ImageOps.fit(image, size, Image.ANTIALIAS)
    image_array = np.asarray(image)
    normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1
    return np.expand_dims(normalized_image_array, axis=0)

# Função para prever a classe da imagem
def predict(image):
    data = preprocess_image(image)
    prediction = model.predict(data)
    index = np.argmax(prediction)
    class_name = class_names[index]
    confidence_score = prediction[0][index]
    return class_name, confidence_score

# Função principal do Streamlit
def main():
    st.title("Classificador de Imagens")

    uploaded_file = st.file_uploader("Escolha uma imagem...", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='Imagem carregada', use_column_width=True)
        st.write("")
        st.write("Classificando...")

        class_name, confidence_score = predict(image)

        st.write(f"Classe: {class_name}")
        st.write(f"Pontuação de Confiança: {confidence_score}")

if __name__ == "__main__":
    main()
